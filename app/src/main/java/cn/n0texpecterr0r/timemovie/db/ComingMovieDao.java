package cn.n0texpecterr0r.timemovie.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.n0texpecterr0r.timemovie.coming.bean.ComingMovie;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COMING_MOVIE".
*/
public class ComingMovieDao extends AbstractDao<ComingMovie, Void> {

    public static final String TABLENAME = "COMING_MOVIE";

    /**
     * Properties of entity ComingMovie.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Actor1 = new Property(0, String.class, "actor1", false, "ACTOR1");
        public final static Property Actor2 = new Property(1, String.class, "actor2", false, "ACTOR2");
        public final static Property Director = new Property(2, String.class, "director", false, "DIRECTOR");
        public final static Property Id = new Property(3, Long.class, "id", false, "ID");
        public final static Property Img = new Property(4, String.class, "img", false, "IMG");
        public final static Property IsVideo = new Property(5, boolean.class, "isVideo", false, "IS_VIDEO");
        public final static Property LocationName = new Property(6, String.class, "locationName", false, "LOCATION_NAME");
        public final static Property ReleaseDate = new Property(7, String.class, "releaseDate", false, "RELEASE_DATE");
        public final static Property Name = new Property(8, String.class, "name", false, "NAME");
        public final static Property Type = new Property(9, String.class, "type", false, "TYPE");
        public final static Property VideoCount = new Property(10, int.class, "videoCount", false, "VIDEO_COUNT");
        public final static Property WantedCount = new Property(11, int.class, "wantedCount", false, "WANTED_COUNT");
        public final static Property LocationId = new Property(12, int.class, "locationId", false, "LOCATION_ID");
    }


    public ComingMovieDao(DaoConfig config) {
        super(config);
    }
    
    public ComingMovieDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COMING_MOVIE\" (" + //
                "\"ACTOR1\" TEXT," + // 0: actor1
                "\"ACTOR2\" TEXT," + // 1: actor2
                "\"DIRECTOR\" TEXT," + // 2: director
                "\"ID\" INTEGER," + // 3: id
                "\"IMG\" TEXT," + // 4: img
                "\"IS_VIDEO\" INTEGER NOT NULL ," + // 5: isVideo
                "\"LOCATION_NAME\" TEXT," + // 6: locationName
                "\"RELEASE_DATE\" TEXT," + // 7: releaseDate
                "\"NAME\" TEXT," + // 8: name
                "\"TYPE\" TEXT," + // 9: type
                "\"VIDEO_COUNT\" INTEGER NOT NULL ," + // 10: videoCount
                "\"WANTED_COUNT\" INTEGER NOT NULL ," + // 11: wantedCount
                "\"LOCATION_ID\" INTEGER NOT NULL );"); // 12: locationId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COMING_MOVIE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ComingMovie entity) {
        stmt.clearBindings();
 
        String actor1 = entity.getActor1();
        if (actor1 != null) {
            stmt.bindString(1, actor1);
        }
 
        String actor2 = entity.getActor2();
        if (actor2 != null) {
            stmt.bindString(2, actor2);
        }
 
        String director = entity.getDirector();
        if (director != null) {
            stmt.bindString(3, director);
        }
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(4, id);
        }
 
        String img = entity.getImg();
        if (img != null) {
            stmt.bindString(5, img);
        }
        stmt.bindLong(6, entity.getIsVideo() ? 1L: 0L);
 
        String locationName = entity.getLocationName();
        if (locationName != null) {
            stmt.bindString(7, locationName);
        }
 
        String releaseDate = entity.getReleaseDate();
        if (releaseDate != null) {
            stmt.bindString(8, releaseDate);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(9, name);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(10, type);
        }
        stmt.bindLong(11, entity.getVideoCount());
        stmt.bindLong(12, entity.getWantedCount());
        stmt.bindLong(13, entity.getLocationId());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ComingMovie entity) {
        stmt.clearBindings();
 
        String actor1 = entity.getActor1();
        if (actor1 != null) {
            stmt.bindString(1, actor1);
        }
 
        String actor2 = entity.getActor2();
        if (actor2 != null) {
            stmt.bindString(2, actor2);
        }
 
        String director = entity.getDirector();
        if (director != null) {
            stmt.bindString(3, director);
        }
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(4, id);
        }
 
        String img = entity.getImg();
        if (img != null) {
            stmt.bindString(5, img);
        }
        stmt.bindLong(6, entity.getIsVideo() ? 1L: 0L);
 
        String locationName = entity.getLocationName();
        if (locationName != null) {
            stmt.bindString(7, locationName);
        }
 
        String releaseDate = entity.getReleaseDate();
        if (releaseDate != null) {
            stmt.bindString(8, releaseDate);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(9, name);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(10, type);
        }
        stmt.bindLong(11, entity.getVideoCount());
        stmt.bindLong(12, entity.getWantedCount());
        stmt.bindLong(13, entity.getLocationId());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public ComingMovie readEntity(Cursor cursor, int offset) {
        ComingMovie entity = new ComingMovie( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // actor1
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // actor2
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // director
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // id
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // img
            cursor.getShort(offset + 5) != 0, // isVideo
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // locationName
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // releaseDate
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // name
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // type
            cursor.getInt(offset + 10), // videoCount
            cursor.getInt(offset + 11), // wantedCount
            cursor.getInt(offset + 12) // locationId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ComingMovie entity, int offset) {
        entity.setActor1(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setActor2(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDirector(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setId(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setImg(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIsVideo(cursor.getShort(offset + 5) != 0);
        entity.setLocationName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setReleaseDate(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setType(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setVideoCount(cursor.getInt(offset + 10));
        entity.setWantedCount(cursor.getInt(offset + 11));
        entity.setLocationId(cursor.getInt(offset + 12));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(ComingMovie entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(ComingMovie entity) {
        return null;
    }

    @Override
    public boolean hasKey(ComingMovie entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
