package cn.n0texpecterr0r.timemovie.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.n0texpecterr0r.timemovie.saling.bean.SalingMovie;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SALING_MOVIE".
*/
public class SalingMovieDao extends AbstractDao<SalingMovie, Void> {

    public static final String TABLENAME = "SALING_MOVIE";

    /**
     * Properties of entity SalingMovie.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Actor1 = new Property(0, String.class, "actor1", false, "ACTOR1");
        public final static Property Actor2 = new Property(1, String.class, "actor2", false, "ACTOR2");
        public final static Property Actors = new Property(2, String.class, "actors", false, "ACTORS");
        public final static Property CinemaCount = new Property(3, int.class, "cinemaCount", false, "CINEMA_COUNT");
        public final static Property Description = new Property(4, String.class, "description", false, "DESCRIPTION");
        public final static Property FilmLong = new Property(5, String.class, "filmLong", false, "FILM_LONG");
        public final static Property Director = new Property(6, String.class, "director", false, "DIRECTOR");
        public final static Property Id = new Property(7, Long.class, "id", false, "ID");
        public final static Property Img = new Property(8, String.class, "img", false, "IMG");
        public final static Property Is3D = new Property(9, boolean.class, "is3D", false, "IS3_D");
        public final static Property IsDMAX = new Property(10, boolean.class, "isDMAX", false, "IS_DMAX");
        public final static Property IsHasTrailer = new Property(11, boolean.class, "isHasTrailer", false, "IS_HAS_TRAILER");
        public final static Property IsHot = new Property(12, boolean.class, "isHot", false, "IS_HOT");
        public final static Property IsIMAX = new Property(13, boolean.class, "isIMAX", false, "IS_IMAX");
        public final static Property IsIMAX3D = new Property(14, boolean.class, "isIMAX3D", false, "IS_IMAX3_D");
        public final static Property IsNew = new Property(15, boolean.class, "isNew", false, "IS_NEW");
        public final static Property IsTicket = new Property(16, boolean.class, "isTicket", false, "IS_TICKET");
        public final static Property MovieId = new Property(17, int.class, "movieId", false, "MOVIE_ID");
        public final static Property MovieType = new Property(18, String.class, "movieType", false, "MOVIE_TYPE");
        public final static Property Score = new Property(19, double.class, "score", false, "SCORE");
        public final static Property Date = new Property(20, String.class, "date", false, "DATE");
        public final static Property NameCn = new Property(21, String.class, "nameCn", false, "NAME_CN");
        public final static Property NameEn = new Property(22, String.class, "nameEn", false, "NAME_EN");
        public final static Property WantedCount = new Property(23, int.class, "wantedCount", false, "WANTED_COUNT");
        public final static Property LocationId = new Property(24, int.class, "locationId", false, "LOCATION_ID");
    }


    public SalingMovieDao(DaoConfig config) {
        super(config);
    }
    
    public SalingMovieDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SALING_MOVIE\" (" + //
                "\"ACTOR1\" TEXT," + // 0: actor1
                "\"ACTOR2\" TEXT," + // 1: actor2
                "\"ACTORS\" TEXT," + // 2: actors
                "\"CINEMA_COUNT\" INTEGER NOT NULL ," + // 3: cinemaCount
                "\"DESCRIPTION\" TEXT," + // 4: description
                "\"FILM_LONG\" TEXT," + // 5: filmLong
                "\"DIRECTOR\" TEXT," + // 6: director
                "\"ID\" INTEGER," + // 7: id
                "\"IMG\" TEXT," + // 8: img
                "\"IS3_D\" INTEGER NOT NULL ," + // 9: is3D
                "\"IS_DMAX\" INTEGER NOT NULL ," + // 10: isDMAX
                "\"IS_HAS_TRAILER\" INTEGER NOT NULL ," + // 11: isHasTrailer
                "\"IS_HOT\" INTEGER NOT NULL ," + // 12: isHot
                "\"IS_IMAX\" INTEGER NOT NULL ," + // 13: isIMAX
                "\"IS_IMAX3_D\" INTEGER NOT NULL ," + // 14: isIMAX3D
                "\"IS_NEW\" INTEGER NOT NULL ," + // 15: isNew
                "\"IS_TICKET\" INTEGER NOT NULL ," + // 16: isTicket
                "\"MOVIE_ID\" INTEGER NOT NULL ," + // 17: movieId
                "\"MOVIE_TYPE\" TEXT," + // 18: movieType
                "\"SCORE\" REAL NOT NULL ," + // 19: score
                "\"DATE\" TEXT," + // 20: date
                "\"NAME_CN\" TEXT," + // 21: nameCn
                "\"NAME_EN\" TEXT," + // 22: nameEn
                "\"WANTED_COUNT\" INTEGER NOT NULL ," + // 23: wantedCount
                "\"LOCATION_ID\" INTEGER NOT NULL );"); // 24: locationId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SALING_MOVIE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SalingMovie entity) {
        stmt.clearBindings();
 
        String actor1 = entity.getActor1();
        if (actor1 != null) {
            stmt.bindString(1, actor1);
        }
 
        String actor2 = entity.getActor2();
        if (actor2 != null) {
            stmt.bindString(2, actor2);
        }
 
        String actors = entity.getActors();
        if (actors != null) {
            stmt.bindString(3, actors);
        }
        stmt.bindLong(4, entity.getCinemaCount());
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(5, description);
        }
 
        String filmLong = entity.getFilmLong();
        if (filmLong != null) {
            stmt.bindString(6, filmLong);
        }
 
        String director = entity.getDirector();
        if (director != null) {
            stmt.bindString(7, director);
        }
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(8, id);
        }
 
        String img = entity.getImg();
        if (img != null) {
            stmt.bindString(9, img);
        }
        stmt.bindLong(10, entity.getIs3D() ? 1L: 0L);
        stmt.bindLong(11, entity.getIsDMAX() ? 1L: 0L);
        stmt.bindLong(12, entity.getIsHasTrailer() ? 1L: 0L);
        stmt.bindLong(13, entity.getIsHot() ? 1L: 0L);
        stmt.bindLong(14, entity.getIsIMAX() ? 1L: 0L);
        stmt.bindLong(15, entity.getIsIMAX3D() ? 1L: 0L);
        stmt.bindLong(16, entity.getIsNew() ? 1L: 0L);
        stmt.bindLong(17, entity.getIsTicket() ? 1L: 0L);
        stmt.bindLong(18, entity.getMovieId());
 
        String movieType = entity.getMovieType();
        if (movieType != null) {
            stmt.bindString(19, movieType);
        }
        stmt.bindDouble(20, entity.getScore());
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(21, date);
        }
 
        String nameCn = entity.getNameCn();
        if (nameCn != null) {
            stmt.bindString(22, nameCn);
        }
 
        String nameEn = entity.getNameEn();
        if (nameEn != null) {
            stmt.bindString(23, nameEn);
        }
        stmt.bindLong(24, entity.getWantedCount());
        stmt.bindLong(25, entity.getLocationId());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SalingMovie entity) {
        stmt.clearBindings();
 
        String actor1 = entity.getActor1();
        if (actor1 != null) {
            stmt.bindString(1, actor1);
        }
 
        String actor2 = entity.getActor2();
        if (actor2 != null) {
            stmt.bindString(2, actor2);
        }
 
        String actors = entity.getActors();
        if (actors != null) {
            stmt.bindString(3, actors);
        }
        stmt.bindLong(4, entity.getCinemaCount());
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(5, description);
        }
 
        String filmLong = entity.getFilmLong();
        if (filmLong != null) {
            stmt.bindString(6, filmLong);
        }
 
        String director = entity.getDirector();
        if (director != null) {
            stmt.bindString(7, director);
        }
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(8, id);
        }
 
        String img = entity.getImg();
        if (img != null) {
            stmt.bindString(9, img);
        }
        stmt.bindLong(10, entity.getIs3D() ? 1L: 0L);
        stmt.bindLong(11, entity.getIsDMAX() ? 1L: 0L);
        stmt.bindLong(12, entity.getIsHasTrailer() ? 1L: 0L);
        stmt.bindLong(13, entity.getIsHot() ? 1L: 0L);
        stmt.bindLong(14, entity.getIsIMAX() ? 1L: 0L);
        stmt.bindLong(15, entity.getIsIMAX3D() ? 1L: 0L);
        stmt.bindLong(16, entity.getIsNew() ? 1L: 0L);
        stmt.bindLong(17, entity.getIsTicket() ? 1L: 0L);
        stmt.bindLong(18, entity.getMovieId());
 
        String movieType = entity.getMovieType();
        if (movieType != null) {
            stmt.bindString(19, movieType);
        }
        stmt.bindDouble(20, entity.getScore());
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(21, date);
        }
 
        String nameCn = entity.getNameCn();
        if (nameCn != null) {
            stmt.bindString(22, nameCn);
        }
 
        String nameEn = entity.getNameEn();
        if (nameEn != null) {
            stmt.bindString(23, nameEn);
        }
        stmt.bindLong(24, entity.getWantedCount());
        stmt.bindLong(25, entity.getLocationId());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public SalingMovie readEntity(Cursor cursor, int offset) {
        SalingMovie entity = new SalingMovie( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // actor1
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // actor2
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // actors
            cursor.getInt(offset + 3), // cinemaCount
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // description
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // filmLong
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // director
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // id
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // img
            cursor.getShort(offset + 9) != 0, // is3D
            cursor.getShort(offset + 10) != 0, // isDMAX
            cursor.getShort(offset + 11) != 0, // isHasTrailer
            cursor.getShort(offset + 12) != 0, // isHot
            cursor.getShort(offset + 13) != 0, // isIMAX
            cursor.getShort(offset + 14) != 0, // isIMAX3D
            cursor.getShort(offset + 15) != 0, // isNew
            cursor.getShort(offset + 16) != 0, // isTicket
            cursor.getInt(offset + 17), // movieId
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // movieType
            cursor.getDouble(offset + 19), // score
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // date
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // nameCn
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // nameEn
            cursor.getInt(offset + 23), // wantedCount
            cursor.getInt(offset + 24) // locationId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SalingMovie entity, int offset) {
        entity.setActor1(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setActor2(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setActors(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCinemaCount(cursor.getInt(offset + 3));
        entity.setDescription(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFilmLong(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDirector(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setId(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setImg(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setIs3D(cursor.getShort(offset + 9) != 0);
        entity.setIsDMAX(cursor.getShort(offset + 10) != 0);
        entity.setIsHasTrailer(cursor.getShort(offset + 11) != 0);
        entity.setIsHot(cursor.getShort(offset + 12) != 0);
        entity.setIsIMAX(cursor.getShort(offset + 13) != 0);
        entity.setIsIMAX3D(cursor.getShort(offset + 14) != 0);
        entity.setIsNew(cursor.getShort(offset + 15) != 0);
        entity.setIsTicket(cursor.getShort(offset + 16) != 0);
        entity.setMovieId(cursor.getInt(offset + 17));
        entity.setMovieType(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setScore(cursor.getDouble(offset + 19));
        entity.setDate(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setNameCn(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setNameEn(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setWantedCount(cursor.getInt(offset + 23));
        entity.setLocationId(cursor.getInt(offset + 24));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(SalingMovie entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(SalingMovie entity) {
        return null;
    }

    @Override
    public boolean hasKey(SalingMovie entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
